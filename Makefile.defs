#******************************************************************************
#
# Get the operating system name.  If this is Cygwin, the .d files will be
# munged to convert c: into /cygdrive/c so that "make" will be happy with the
# auto-generated dependencies.
#
#******************************************************************************
ifdef SystemRoot
   os:=WINDOWS
   RM = del 
   MKDIR = mkdir
   PATHSEP2=\\
   FixPath = $(subst /,\,$1)
else
   RM = rm -rf
   os:=${shell uname -s}
   MKDIR = mkdir -p
   PATHSEP2=/
   ifeq ($(shell uname), Linux)
      FixPath = $1
   endif
endif

PATHSEP=$(strip $(PATHSEP2))
#
# Usage   'make print-VARIABLE' and it will print the variable to the screen
print-%: ; @echo $*=$($*)



#******************************************************************************
#
# The compiler to be used.
#
#******************************************************************************
ifndef COMPILER
COMPILER=gcc
endif

#******************************************************************************
#
# Definitions for using GCC.
#
#******************************************************************************
ifeq (${COMPILER}, gcc)

#
# The command for calling the compiler.
#
CC=arm-none-eabi-gcc

#
# The location of the C compiler
# ARMGCC_ROOT is used by some makefiles that need to know where the compiler
# is installed.
#
ifneq ($(os),WINDOWS)
ARMGCC_ROOT:=${shell dirname '${shell sh -c "which ${CC}"}'}/..
endif

#
# Set the compiler CPU/FPU options.
#
CPU=-mcpu=cortex-m4
FPU=-mfpu=fpv4-sp-d16 -mfloat-abi=softfp

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb \
       ${CPU}  \
       ${FPU}  \
       -MD

#
# The flags passed to the compiler.
#
CFLAGS=-mthumb                               \
       ${CPU}                                \
       ${FPU}                                \
       -ffunction-sections                   \
       -fdata-sections                       \
       -MD                                   \
       -std=c99                              \
       -D${PART}                             \
       -DUSE_CMSIS_REGISTER_FORMAT           \
       -Dgcc                                 \
       -c

#
# The command for calling the library archiver.
#
AR=arm-none-eabi-ar

#
# The command for calling the linker.
#
LD=arm-none-eabi-ld

#
# The flags passed to the linker.
#
LDFLAGS=--gc-sections \
		--print-map

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC:=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}

#
# Get the location of libc.a from the GCC front-end.
#
LIBC:=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}

#
# Get the location of libm.a from the GCC front-end.
#
LIBM:=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}

#
# The command for extracting images from the linked executables.
#
OBJCOPY=arm-none-eabi-objcopy

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#
ifdef DEBUG
CFLAGS+=-g -D DEBUG -O0
else
CFLAGS+=-Os
endif


#
# Add the tool specific CFLAGS.
#
CFLAGS+=${CFLAGSgcc}

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

#
# The rule for building the object file from each C source file.
#
${BUILD_DIR}/%.o: %.c
	${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d}
endif

#
# The rule for building the object file from each C source file.
#

${BUILD_DIR}/%.o: ${SOURCE}/%.c
	${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d}
endif

#
# The rule for building the object file from each assembly source file.
#
${BUILD_DIR}/%.o: %.S
	${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}
ifneq ($(findstring CYGWIN, ${os}), )
	@sed -i -r 's/ ([A-Za-z]):/ \/cygdrive\/\1/g' ${@:.o=.d}
endif

#
# The rule for creating an object library.
#
${BUILD_DIR}/%.a:
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application.
#
${BUILD_DIR}/%.axf:
	${LD} -T ${ldname}                                                   \
	      --entry ${ENTRY_${notdir ${@:.axf=}}}                           \
	      ${LDFLAGSgcc_${notdir ${@:.axf=}}}                              \
	      ${LDFLAGS} -o ${@} $(filter %.o %.a, ${^})                      \
	      '${LIBM}' '${LIBC}' '${LIBGCC}'
	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}
endif
